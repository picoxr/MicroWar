#pragma kernel CSMain_PNT
#pragma kernel CSMain_PN
//#pragma enable_d3d11_debug_symbols

#include "../GPUSkin.cginc"

// Notice: RWByteAddressBuffer Store for glsl have compile error
#ifdef PAV_OUT_STRUCTURED_BUFFER
RWStructuredBuffer<uint> _outputBuffer;
#endif

#ifdef PAV_OUT_RAW_BUFFER
RWByteAddressBuffer _outputBuffer;
#endif

int _meshInstanceCount;
int _totalVertexCount;

[numthreads(64, 1, 1)]
void CSMain_PNT (uint3 id : SV_DispatchThreadID)
{
    const uint vertexIndex = id.x;
    if (vertexIndex >= (uint) _totalVertexCount)
    {
        return;
    }

    MeshInstanceDesc meshInstanceDesc;
    uint vid;
    if (_meshInstanceCount > 1)
    {
        meshInstanceDesc = GetMeshInstanceDesc(vertexIndex);
        vid = meshInstanceDesc.vertexID;
    }
    else
    {
        meshInstanceDesc = GetMeshInstanceDesc(0);
        vid = vertexIndex;
    }
    StaticBufferDesc staticBufferDesc = GetStaticBufferDesc(meshInstanceDesc.staticBufferOffset);
    DynamicBufferDesc dynamicBufferDesc = GetDynamicBufferDesc(meshInstanceDesc.dynamicBufferOffset);

    float3 position = (float3) 0;
    float3 normal = (float3) 0;
    float4 tangent = (float4) 0;
    if (staticBufferDesc.mergedContinueLayoutInfoDataOffset > 0)
    {
        GetBaseVertexContinueLayout_ApplyMorph_PNT(staticBufferDesc, dynamicBufferDesc, vid, position, normal, tangent);
    }
    else
    {
        GetBaseVertex(staticBufferDesc, vid, position, normal, tangent);

        // morph
        ApplyMorph_PNT(
            staticBufferDesc,
            dynamicBufferDesc,
            vid,
            position,
            normal,
            tangent);
    }

    uint4 boneIndices = GetBoneIndices(staticBufferDesc, vid);
    float4 boneWeights = GetBoneWeights(staticBufferDesc, vid);

    // skin
    ApplySkin_PNT(
        staticBufferDesc,
        dynamicBufferDesc,
        boneIndices,
        boneWeights,
        position,
        normal,
        tangent);

    WriteOutputPosition(_outputBuffer, staticBufferDesc, vid, position);
    if (staticBufferDesc.outputNormalDataOffset != 0)
    {
        WriteOutputNormal(_outputBuffer, staticBufferDesc, vid, normal);
    }
    if (staticBufferDesc.outputTangentDataOffset != 0)
    {
        WriteOutputTangent(_outputBuffer, staticBufferDesc, vid, tangent);
    }
}

[numthreads(64, 1, 1)]
void CSMain_PN (uint3 id : SV_DispatchThreadID)
{
    const uint vertexIndex = id.x;
    if (vertexIndex >= (uint) _totalVertexCount)
    {
        return;
    }

    MeshInstanceDesc meshInstanceDesc;
    uint vid;
    if (_meshInstanceCount > 1)
    {
        meshInstanceDesc = GetMeshInstanceDesc(vertexIndex);
        vid = meshInstanceDesc.vertexID;
    }
    else
    {
        meshInstanceDesc = GetMeshInstanceDesc(0);
        vid = vertexIndex;
    }
    StaticBufferDesc staticBufferDesc = GetStaticBufferDesc(meshInstanceDesc.staticBufferOffset);
    DynamicBufferDesc dynamicBufferDesc = GetDynamicBufferDesc(meshInstanceDesc.dynamicBufferOffset);

    float3 position = (float3) 0;
    float3 normal = (float3) 0;
    float4 tangent = (float4) 0;
    if (staticBufferDesc.mergedContinueLayoutInfoDataOffset > 0)
    {
        GetBaseVertexContinueLayout_ApplyMorph_PNT(staticBufferDesc, dynamicBufferDesc, vid, position, normal, tangent);
    }
    else
    {
        GetBaseVertex(staticBufferDesc, vid, position, normal, tangent);

        // morph
        ApplyMorph_PN(
            staticBufferDesc,
            dynamicBufferDesc,
            vid,
            position,
            normal);
    }

    uint4 boneIndices = GetBoneIndices(staticBufferDesc, vid);
    float4 boneWeights = GetBoneWeights(staticBufferDesc, vid);

    // skin
    ApplySkin_PN(
        staticBufferDesc,
        dynamicBufferDesc,
        boneIndices,
        boneWeights,
        position,
        normal);

    WriteOutputPosition(_outputBuffer, staticBufferDesc, vid, position);
    if (staticBufferDesc.outputNormalDataOffset != 0)
    {
        WriteOutputNormal(_outputBuffer, staticBufferDesc, vid, normal);
    }
    if (staticBufferDesc.outputTangentDataOffset != 0)
    {
        WriteOutputTangent(_outputBuffer, staticBufferDesc, vid, tangent);
    }
}
