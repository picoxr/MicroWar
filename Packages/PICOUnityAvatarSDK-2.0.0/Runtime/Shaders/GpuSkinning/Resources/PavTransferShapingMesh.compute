#pragma kernel Transfer_PNT
#pragma kernel Transfer_PN

#define PAV_TRANSFER_SHAPING_MESH_TO_STATIC_BUFFR
#include "../GPUSkin.cginc"

// Notice: RWByteAddressBuffer Store for glsl have compile error
int _totalVertexCount;

// for transfer from shaping morph to merged static buffer.
StructuredBuffer<float3> _positionBuffer;
StructuredBuffer<float3> _normalBuffer;
StructuredBuffer<float4> _tangentBuffer;

[numthreads(64, 1, 1)]
void Transfer_PNT(uint3 id : SV_DispatchThreadID)
{
    const uint vertexIndex = id.x;
    if (vertexIndex >= (uint) _totalVertexCount)
    {
        return;
    }
    //
    MeshInstanceDesc meshInstanceDesc = GetMeshInstanceDesc(0);
    //
    StaticBufferDesc desc = GetStaticBufferDesc(meshInstanceDesc.staticBufferOffset);
    //
    SetFloat3(_staticBuffer, desc.meshVertexDataFormat, desc.meshPositionDataOffset, vertexIndex, _positionBuffer[vertexIndex]);
    SetFloat3(_staticBuffer, desc.meshVertexDataFormat, desc.meshNormalDataOffset, vertexIndex, _normalBuffer[vertexIndex]);
    SetFloat4(_staticBuffer, desc.meshVertexDataFormat, desc.meshTangentDataOffset, vertexIndex, _tangentBuffer[vertexIndex]);
}

[numthreads(64, 1, 1)]
void Transfer_PN(uint3 id : SV_DispatchThreadID)
{
    const uint vertexIndex = id.x;
    if (vertexIndex >= (uint) _totalVertexCount)
    {
        return;
    }
    //
    MeshInstanceDesc meshInstanceDesc = GetMeshInstanceDesc(0);
    //
    StaticBufferDesc desc = GetStaticBufferDesc(meshInstanceDesc.staticBufferOffset);
    //
    SetFloat3(_staticBuffer, desc.meshVertexDataFormat, desc.meshPositionDataOffset, vertexIndex, _positionBuffer[vertexIndex]);
    SetFloat3(_staticBuffer, desc.meshVertexDataFormat, desc.meshNormalDataOffset, vertexIndex, _normalBuffer[vertexIndex]);
}